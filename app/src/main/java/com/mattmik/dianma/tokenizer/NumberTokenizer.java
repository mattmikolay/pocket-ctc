/*
 * Copyright (c) 2016 Matthew Mikolay
 *
 * This file is part of Pocket CTC.
 *
 * Pocket CTC is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Pocket CTC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Pocket CTC.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.mattmik.dianma.tokenizer;

import java.util.NoSuchElementException;

/**
 * NumberTokenizer tokenizes a given string of text into individual sequences of numbers. Contiguous
 * digits will be grouped into a single token. Any non-digit character in the given string will be
 * returned as its own token.
 * <p>
 * Objects returned by {@link #nextToken()} are of type {@link String}. {@link #nextToken()} will
 * return an empty string while more tokens remain but the next available token is still being
 * generated by the tokenizer.
 */
public class NumberTokenizer implements Tokenizer {

    private String mInputText;
    private int mStartIndex;
    private int mStopIndex;

    /**
     * Constructs a new NumberTokenizer instance.
     * @param inputText the text to be tokenized
     */
    public NumberTokenizer(String inputText) {
        mInputText = inputText;
        mStartIndex = 0;
        mStopIndex = 0;
    }

    @Override
    public String getInput() {
        return mInputText;
    }

    @Override
    public boolean hasMoreTokens() {
        return (mStartIndex != mStopIndex || mStopIndex < mInputText.length());
    }

    @Override
    public Object nextToken() {

        if(mStartIndex == mStopIndex && mStopIndex >= mInputText.length())
            throw new NoSuchElementException("No tokens are available.");

        // Process next character, if one is available
        if(mStopIndex < mInputText.length()) {

            int codepoint = mInputText.codePointAt(mStopIndex);

            // If this is a number character, skip it for now. We will return it as a token later.
            if(codepoint >= '0' && codepoint <= '9') {
                mStopIndex++;
                return "";
            }

            // Otherwise, return this single codepoint as a string.
            // (But if this codepoint is whitespace, return the empty string.)
            if(mStartIndex == mStopIndex) {
                mStopIndex += Character.charCount(codepoint);
                String result = mInputText.substring(mStartIndex, mStopIndex);
                mStartIndex = mStopIndex;
                return (Character.isWhitespace(codepoint) ? "" : result);
            }

        }

        String result = mInputText.substring(mStartIndex, mStopIndex);
        mStartIndex = mStopIndex;
        return result;

    }

}
