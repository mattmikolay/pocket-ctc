package com.mattmik.dianma;

// Copyright 2016 Matthew Mikolay. All rights reserved.

import java.util.NoSuchElementException;

/**
 * NumberTokenizer tokenizes a given string of text into individual sequences of numbers. Contiguous
 * digits will be grouped into a single token. Any non-digit character in the given string will be
 * returned as its own token.
 * <p>
 * Objects returned by {@link #nextToken()} are of type {@link String}. {@link #nextToken()} will
 * return an empty string while more tokens remain but the next available token is still being
 * generated by the tokenizer.
 */
public class NumberTokenizer implements Tokenizer {

    private String mInputText;
    private int mStartIndex;
    private int mStopIndex;

    /**
     * Constructs a new NumberTokenizer instance.
     * @param inputText the text to be tokenized
     */
    public NumberTokenizer(String inputText) {
        mInputText = inputText;
        mStartIndex = 0;
        mStopIndex = 0;
    }

    @Override
    public String getInput() {
        return mInputText;
    }

    @Override
    public boolean hasMoreTokens() {
        return (mStartIndex != mStopIndex || mStopIndex < mInputText.length());
    }

    @Override
    public Object nextToken() {

        if(mStartIndex == mStopIndex && mStopIndex >= mInputText.length())
            throw new NoSuchElementException("No tokens are available.");

        // Process next character, if one is available
        if(mStopIndex < mInputText.length()) {

            char c = mInputText.charAt(mStopIndex);

            // If this is a number character, skip it for now. We will return it as a token later.
            if(c >= '0' && c <= '9') {
                mStopIndex++;
                return "";
            }

        }

        if(mStartIndex == mStopIndex)
            return mInputText.substring(mStartIndex++, ++mStopIndex);

        String result = mInputText.substring(mStartIndex, mStopIndex);
        mStartIndex = mStopIndex;
        return result;

    }

}
